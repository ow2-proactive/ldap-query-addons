import com.github.jk1.license.render.*

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://repository.activeeon.com/content/groups/proactive/"
        }
    }

    dependencies {
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0.0"
        classpath 'com.github.jk1:gradle-license-report:1.7'
    }
    dependencies {
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

group 'org.ow2.proactive'
version projectVersion

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.jk1.dependency-license-report'
apply from: "$rootDir/gradle/ext/coding-format.gradle"

licenseReport {
    configurations = ['runtime']
    renderers = [new InventoryHtmlReportRenderer()]
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    mavenCentral()
}

uploadArchives {
    repositories {
        mavenDeployer {
            snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
            repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                authentication(userName: "${System.getProperty('nexusUsername')}",
                        password: "${System.getProperty('nexusPassword')}")
            }
        }
    }
}

defaultTasks 'clean', 'jar'


dependencies {
    compile 'org.projectlombok:lombok:1.16.6'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
    compile "com.google.guava:guava:19.0"

    testCompile 'org.powermock:powermock-mockito-release-full:1.6.2'
    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}

jar {
    from {
        configurations.compile
                .findAll { !it.name.toLowerCase().contains("slf4j") && !it.name.contains("META-INF/maven") }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/maven/**'
}
